Домашние работы по курсу ООП.

Папка DZ1: домашняя работа по семинару № 1
    Добавлено три новых продукта: BottleOfJuice, CandyBar, BagOfChips.
    У этих продуктов есть собственные параметры: вкус (у всех трёх), вес (у батончика и пачки чипсов), калорийность (у батончика).

Папка DZ2: домашняя работа по семинару № 2
    Созданы классы Cat и Plate. Сделано так, чтобы в тарелке с едой не могло получиться отрицательного количества еды.
    Каждому коту нужно добавлено поле сытость (когда создаем котов, они голодны). Если коту удалось покушать (хватило еды), сытость = true. 
    едойсли коту мало еды в тарелке, то он её просто не трогает.
    Создан массив котов и тарелка с едой, результаты поглощения еды из этой тарелки выводятся в консоль сообщением о сытости котов.
    Добавлен в тарелку метод, с помощью которого можно было бы добавлять еду в тарелку.

***

Папка DZ4: домашняя работа по семинару № 4
Задача к семинару № 4:
a. Даны классы Fruit, Apple extends Fruit, Orange extends Fruit;
b. Класс Box, в который можно складывать фрукты. Коробки условно сортируются по типу фрукта,
поэтому в одну коробку нельзя сложить и яблоки, и апельсины;
c. Для хранения фруктов внутри коробки можно использовать ArrayList;
d. Сделать метод getWeight(), который высчитывает вес коробки, зная вес одного фрукта и их количество:
вес яблока – 1.0f, апельсина – 1.5f (единицы измерения не важны);
e. Внутри класса Box сделать метод compare(), который позволяет сравнить текущую коробку с той, которую
подадут в compare() в качестве параметра. true – если их массы равны, false в противоположном случае.
Можно сравнивать коробки с яблоками и апельсинами;
f. Написать метод, который позволяет пересыпать фрукты из текущей коробки в другую.
Помним про сортировку фруктов: нельзя яблоки высыпать в коробку с апельсинами.
Соответственно, в текущей коробке фруктов не остается, а в другую перекидываются объекты, которые были в первой;
g. Не забываем про метод добавления фрукта в коробку.
